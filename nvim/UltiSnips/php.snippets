global !p
import sniphpets
endglobal

snippet try "try/catch" b
try {
	${VISUAL}${0}
} catch (${1:Exception} $exception) {
}
endsnippet

snippet tryf "try/catch/finally" b
try {
	${VISUAL}${0}
} catch (${1:Exception} $exception) {
} finally {
}
endsnippet

snippet containerget "Get from container" b
/** @var ${1:Class} \$${2:`!p snip.rv = sniphpets.lcfirst(t[1])`} */
\$$2 = ${3:App::getContainer()}->get($1::class);
endsnippet

snippet construct "__construct()" b
public function __construct($1)
{${1/\s*\w* ?\$(\w+)(,\s+)*/\n        $this->$1 = $$1;/g}
}
endsnippet

snippet has "Method / Has" b
public function has${1}()${2:: bool}
{
	return \$this->${1/^./\l$0/} !== null;
}
endsnippet

snippet is "Method / Is" b
public function is${1}()${2:: bool}
{
	return \$this->${1/^./\l$0/};
}
endsnippet

snippet pucase "PHPUnit / Test case" b
<?php

namespace `!v sniphpets#namespace()`;

use PHPUnit\Framework\TestCase;

final class `!v sniphpets#basename()` extends TestCase
{
	public function setUp(): void
	{
		${VISUAL}${0}
	}
}
endsnippet

snippet putestit "PHPUnit / Test method with it..." b
/**
 * @test
 */
public function it${1}(): void
{
	${VISUAL}${0}
}
endsnippet

snippet puprovides "PHPUnit / Data provider" b
public function provides${1}(): array
{
	return [
		${VISUAL}${0}
	];
}
endsnippet

snippet builder "Builder / Class" b
<?php

namespace `!v sniphpets#namespace()`;

final class `!v sniphpets#basename()`
{
	public static function startWithDefault(): self
	{
		\$builder = new self();
		${VISUAL}${0}

		return \$builder;
	}

	public function build(): `!v sniphpets#remove_tail(sniphpets#basename(), 'Builder')`
	{
		return new `!v sniphpets#remove_tail(sniphpets#basename(), 'Builder')`(
		);
	}
}
endsnippet

snippet with "Builder / With" b
public function with${1}(${2:$1 }$${1/^./\l$0/}): self
{
	\$${3:clone} = clone \$this;
	\$$3->${1/^./\l$0/} = \$${1/^./\l$0/};

	return \$$3;
}
endsnippet

snippet without "Builder / Without" b
public function without${1}(): self
{
	\$${2:clone} = clone \$this;
	\$$2->${1/^./\l$0/} = null;

	return \$$2;
}
endsnippet
